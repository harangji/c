#정렬
-내부정렬 : 메인 (주) 메모리만 활용
-외부정렬 : 디스크 (외부 보조 메모리) 활용

#정렬의 종류
1. 버블 정렬 bubble       }
2. 선택 정렬 selection    } -> O ( n ^ 2 )
3. 삽입 정렬 insertion    }

4. 퀵 정렬   quick        } O ( n log n )


#방식 정리
1. 버블 정렬 : 인접한 두 원소를 비교하여 필요에 따라 교환하는 정렬 알고리즘
5 4 3 2 1
4 3 2 1 5
3 2 1 4 5...

2. 선택 정렬 : 배열에서 최솟값을 선택하여 정렬하는 알고리즘 ( 첫번째 자리부터 차례로 교환 )
5 4 3 2 1
1 4 3 2 5
1 2 3 4 5

3. 삽입 정렬 : 배열을 정렬된 부분과 정렬되지 않은 부분으로 나누어 하나씩 요소를 적절한 위치에 삽입하여 정렬하는 알고리즘
 [5, 2, 9, 3, 1]
첫 번째 반복 (두 번째 원소):
2를 선택합니다.
5와 비교하여 2를 삽입할 위치를 찾습니다. 배열: [2, 5, 9, 3, 1]

두 번째 반복 (세 번째 원소):
9를 선택합니다.
5와 비교하여 9를 삽입할 위치를 찾습니다. 배열: [2, 5, 9, 3, 1]

세 번째 반복 (네 번째 원소):
3을 선택합니다.
9와 비교하여 3을 삽입할 위치를 찾습니다. 배열: [2, 5, 3, 9, 1]
5와 비교하여 3을 삽입할 위치를 찾습니다. 배열: [2, 3, 5, 9, 1]
2와 비교하여 3을 삽입할 위치를 찾습니다. 배열: [2, 3, 5, 9, 1]

네 번째 반복 (다섯 번째 원소):
1을 선택합니다.
9와 비교하여 1을 삽입할 위치를 찾습니다. 배열: [2, 3, 5, 1, 9]
5와 비교하여 1을 삽입할 위치를 찾습니다. 배열: [2, 3, 1, 5, 9]
3와 비교하여 1을 삽입할 위치를 찾습니다. 배열: [2, 1, 3, 5, 9]
2와 비교하여 1을 삽입할 위치를 찾습니다. 배열: [1, 2, 3, 5, 9]




4. 퀵 정렬 : 분할 정복(divide and conquer) 방식을 사용하여 배열을 정렬하는 알고리즘

















