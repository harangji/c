1) 기차 예제 프로그램

#include <stdio.h>
#include <stdlib.h>
#define MAX 10 // 최대 열차 개수

char stack[MAX]; // 종착역에 열차를 보관할 스택
int top = -1; // 스택의 top 초기값
int bottom = 0; // 스택의 bottom 초기값

void push(char t)
{
if(top == (MAX - 1)) // stack is full
{
printf("\n 스택이 꽉 찼습니다.\n");
return;
}
else
stack[++top] = t; // 스택에 보관
}

char pop()
{
if(top == -1) // stack is empty
return 'Q'; // 스택이 비어 있으면 'Q'를 리턴하는 것으로 함.
else
return (stack[top--]);
}

void prn()
{
int i;
printf("\n------------현재 스택의 모습-------------------\n");
if(top == -1)
printf("\n현재 스택은 비어 있습니다.\n");
else
{
for(i=bottom; i<=top; i++)
printf("%c ", stack[i]);
}
printf("\n---------------------------------------------\n");
}

void main()
{
int choice;
char train; // 기차 이름
char pop_result;

printf("현재는 종착역에 열차가 없습니다.\n");

do
{
choice = 0;
printf("\n\n원하는 작업 선택 : 1-push, 2-pop, 3-스택출력, 4-프로그램 끝내기 : ");
scanf("%d", &choice);
getchar();
switch(choice)
{
case 1:
printf("\npush할 열차 이름을 입력하세요 : ");
scanf("%c", &train);
getchar();
push(train); // push 함수 호출
prn(); // 현재 리스트 내용 전체 출력하기
break;
case 2:
pop_result = pop();
if(pop_result != 'Q') // 스택이 비지않은 경우
printf("\n pop된 열차는 %c 입니다.\n", pop_result);
prn(); // 현재 리스트 내용 전체 출력하기
break;
case 3:
prn(); // 현재 리스트 내용 전체 출력하기
break;
case 4:
default:
printf("프로그램이 끝났습니다.\n");
exit(0);
}
} while(1); // 무한반복

 

2) 중위 표현 -> 후위 표현 수식 변환 프로그램

// 중위 표현 수식을 후위 표현 수식으로 변환, 출력해 주는 프로그램
#include <stdio.h>
void main()
{
char stack[20];
int bottom = 0;
int top = -1;
int i;
char input[30];

printf("수식을 입력하세요 : ");
scanf("%s", input);

printf("후위 표현법으로 변환한 결과 : ");

for(i = 0; input[i] != '\0'; i++)
{
if(input[i] == '(')
continue;
else if(input[i] == ')')
printf("%c", stack[top--]);
else if(input[i] == '+' || input[i] == '-' || input[i] == '*' || input[i] == '/')
stack[++top] = input[i];
else
printf("%c", input[i]);
}
printf("\n\n프로그램 끝\n");
}

3) 중위-> 후위 표현 수식 및 수식 계산도 하는 프로그램


// 중위 표현 수식을 후위 표현 수식으로 변환 출력하고,
// 그 수식의 변수값을 입력했을 때, 수식의 값도 계산하는 프로그램
// 단, 정수 상수는 1자리 수(0 ~ 9)만 사용하기로 한다.
// 수식에서 사용하는 변수는 a, b, c, d, e, f로 최대 6개만 사용하기로 한다.
#include <stdio.h>
void main()
{
char stack[20];
int bottom = 0;
int top = -1;
char input[30];
char postfix[30]; // 후위 수식 보관용
int i, j = 0;
int d1, d2, r;
int a, b, c, d, e, f; // 수식의 변수값 보관용

printf("수식을 입력하세요 : ");
scanf("%s", input);
printf("후위 표현법으로 변환한 결과 : ");
for(i = 0; input[i] != '\0'; i++)
{
if(input[i] == '(')
continue;
else if(input[i] == ')')
{
printf("%c", stack[top]);
postfix[j++] = stack[top];
top--;
}
else if(input[i] == '+' || input[i] == '-' || input[i] == '*' || input[i] == '/')
stack[++top] = input[i];
else
{
printf("%c", input[i]);
postfix[j++] = input[i];
}
}
postfix[j] = '\0';
printf("\n변수 a, b, c, d, e, f 값을 차례대로 입력하세요 : ");
scanf("%d %d %d %d %d %d", &a, &b, &c, &d, &e, &f);
top = -1; // 스택 초기화
for(i = 0; postfix[i] != '\0'; i++)
{
if(postfix[i] == '+' || postfix[i] == '-' || postfix[i] == '*' || postfix[i] == '/')
{
d2 = stack[top--];
d1 = stack[top--];
switch(postfix[i])
{
case '+' :
r = d1 + d2;
break;
case '-' :
r = d1 - d2;
break;
case '*' :
r = d1 * d2;
break;
case '/' :
r = d1 / d2;
break;
default :
printf("111111\n");
}
stack[++top] = r;
}
else
switch(postfix[i])
{
case 'a' :
stack[++top] = a;
break;
case 'b' :
stack[++top] = b;
break;
case 'c' :
stack[++top] = c;
break;
case 'd' :
stack[++top] = d;
break;
case 'e' :
stack[++top] = e;
break;
case 'f' :
stack[++top] = f;
break;
default :
stack[++top] = postfix[i] - 48; // 문자숫자를 정수로 바꿈
}
}
printf("수식의 결과는 %d 입니다.\n", stack[top--]);
printf("\n\n프로그램 끝\n");
}
