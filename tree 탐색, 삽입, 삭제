
자기보다 작은것은 왼쪽, 큰것은 오른쪽

자기 바로 앞에있는거 -> 왼쪽한칸 오른쪽 쭊
자기 바로 뒤에있는거 -> 오른쪽한칸 왼쪽 쭉


----------------- 이진 탐색 트리 프로그램 --------------------------
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// 아래 구조체정의는 외부 변수와 똑같이 모든 함수에서 사용할 수 있는 구조체 정의이다.
struct Node // 트리를 구성할 노드 구조체 정의
{
struct Node *left; // left child link
int value; // data field
struct Node *right; // right child link
};

struct Node tree; // 트리의 루트 노드를 가리킬 용도의 구조체
struct Node *parent; // 탐색 시 현 탐색 노드의 parent를 가리키는 포인터
struct Node *current; // 현재 탐색 노드
struct Node *lchild, *rchild; // 현재 탐색 노드의 왼쪽, 오른쪽 자식
struct Node *l, *r; // 현재 탐색 노드가 부모 노드의 왼쪽 자식인지 오른쪽 자식인지 표시
int leftright;

struct Node *getnode() // 새로운 노드 공간을 동작할당으로 확보해 주는 함수
{ // 동적으로 할당한 노드의 시작 주소를 반환해 준다.
struct Node *p;
p = (struct Node*)malloc(sizeof(struct Node));
return(p);
}

void retnode(struct Node* ptr)
{
free(ptr); // 동적 할당 반환
}

struct Node* bbsearch(int data) // 트리에서 특정값 노드가 있는지 탐색하는 함수
{
// p는 현재 탐색하려는 노드 가리키는 포인터, parent는 그 이전 부모 노드
struct Node *p = tree.right; // 트리 출발점에서부터 출발, 무슨말이냐면... 그냥 맨 밑 재귀함수 호출이니 크게 신경쓰지 말것
parent = &tree;
leftright = -1;
while(p != NULL)
{
if(data < p->value) // 입력된 값이 P(부모) 보다 작다면, 왼쪽으로 이동
{
parent = p;
p = p->left;
leftright = 0;
}
else if(data > p->value) // 크다면, 오른쪽으로 이동
{
parent = p;
p = p->right;
leftright = 1;
}
else // 찾은 경우, 노드포인터 반환 , 무슨말이냐면...더이상 찾을 노드가 존재하지 않을 때가 찾는 위치임
return (p);
}
return (p); // 못찾은 경우, NULL 반환
}

void insert(int data) // 트리에 노드 삽입 함수
{
struct Node *p; // 작업용
struct Node *newnode;
p = bbsearch(data); // 이미 트리에 존재하는지 검사
if(p != NULL) // 이미 존재, 
printf("%d는(은) 이미 트리에 보관되어 있습니다.\n", data);
else // 삽입해야 함
{
newnode = getnode(); // 노드 동적 할당 받음
newnode->value = data;
newnode->left = NULL;
newnode->right = NULL;
if(parent == &tree) // 최초 입력이라면,
tree.right = newnode;
else if(leftright == 0) // 왼쪽에 삽입
parent->left = newnode;
else // 오른쪽에 삽입
parent->right = newnode;
}
}

void del(int data) // 트리에서 노드 삭제 함수
{
int f;
struct Node *p; // 작업용
struct Node *q, *r, *prev; // 작업용
p = bbsearch(data); // 트리에 존재하는지 검사
if(p == NULL) // 존재하지 않음
printf("%d는(은) 트리에 존재하지 않습니다.\n", data);
else // 삭제해야 함
{
if(p->left == NULL && p->right == NULL) // 단말 노드라면
{
if(parent == &tree) // 루트 노드만 있는 경우
tree.right = NULL;
else if(leftright == 0) // 삭제할 노드가 부모 노드의 왼쪽 자식이라면,
parent->left = NULL;
else // 삭제할 노드가 부모 노드의 오른쪽 자식이라면,
parent->right = NULL;
retnode(p); // 동적 반환
}
else if(p->left == NULL || p->right == NULL) // 한개의 자식 노드만 있는 경우
{
if(p->left != NULL) // 왼쪽 자식이 있는 경우라면,
q = p->left;
else
q = p->right; // 오른쪽 자식이 있는 경우라면,
if(leftright == 0) // 삭제할 노드가 부모 노드의 왼쪽 자식이라면,
parent->left = q;
else // 삭제할 노드가 부모 노드의 오른쪽 자식이라면,
parent->right = q;
retnode(p); // 동적 반환
}
else // 두개의 자식 노드가 있는 경우
{
// 왼쪽 서브트리에서 후계자 노드(가장 큰값 노드)를 찾는 작업
r = p->left; // 왼쪽 서브트리에 대해서
prev = p;
f=0; // 왼쪽
while(r->right != NULL) // 오른쪽 링크를 따라 계속 내려간다.
{
prev = r;
r = r->right;
f=1; // 오른쪽
}
// r이 가리키는 노드가 후계자 노드이다.
if(r->left == NULL && r->right == NULL) // 후계자 노드가 단말 노드라면,
{
if(f == 0)
// 후계자 노드가 부모 노드의 왼쪽 자식이므로,
prev->left = NULL;
else
// 후계자 노드가 부모 노드의 오른쪽 자식이므로,
prev->right = NULL;
p->value = r->value;
retnode(r); // 동적 반환
}
else
{ // 후계자 노드가 왼쪽 자식이 있는 경우이다.
q = r->left;
p->value = r->value;
r->value = q->value;
r->left = NULL;
retnode(q);
}
}
}
}

void inorder(struct Node *wt) // 중위 운행법으로 트리를 출력(오름차순으로 정렬 출력된다.)
{
if(wt == NULL)
return;
else
{
inorder(wt->left);
printf("%d ", wt->value);
inorder(wt->right);
}
}

void prn() // 아직 미완성
{
}

void main()
{
int choice;
int val; // 삽입, 삭제, 탐색할 정수 입력받는 용도
struct Node *po; // 탐색 결과 노드의 주소 보관용

// tree 노드의 right 링크는 루트 노드를 가리킴. 최초 상태는 NULL
tree.right = NULL; // 최초 빈 트리를 만듬
printf("현재는 비어있는 트리입니다.\n");

do
{
choice = 0;
printf("\n원하는 작업 선택 : 1-삽입 2-삭제 3- 탐색 4-inorder 출력 5-프로그램 끝내기 : ");
scanf("%d", &choice);
switch(choice)
{
case 1 :
printf("삽입할 정수를 입력하세요 : ");
scanf("%d", &val);
getchar(); //flushall();
insert(val); // 삽입 함수 호출
inorder(tree.right);
prn(); // 현재 트리 출력하기
break;
case 2:
printf("삭제할 정수를 입력하세요 : ");
scanf("%d", &val);
del(val);
inorder(tree.right);
prn(); // 현재 트리 출력하기
break;
case 3:
printf("탐색할 정수를 입력하세요 : ");
scanf("%d", &val);
po = bbsearch(val);
if(po == NULL)
printf("탐색하는 값 %d이 현재 트리에 보관되어 있지 않습니다.\n", val);
else
printf("탐색하는 값 %d는 트리에 보관되어 있습니다.\n", val);
inorder(tree.right);
prn(); // 현재 트리 출력하기
break;
case 4:
inorder(tree.right); // 현재 리스트 내용 전체 출력하기
printf("\n");
prn();
break;
case 5:
default:
printf("프로그램이 끝났습니다.\n");
exit(0);
}
} while(1); // 무한반복
}
