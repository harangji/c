$ 트리 ( Tree )
- 비선형 자료구조
node = 원 , edge = 선 , root node = 맨 위 노드 ,
부모 노드, 자식 노드, 조상 노드
단말 노드 & 리프 노드 = 자식 없음
차수 = 자식의 수

노드간의 상하관계에서 위 노드를 부모 노드(parent node), 아래 노드를 자식 노드(child node)라고 부른다.

같은 부모 노드 아래 자식 노드들을 형제 노드(sibling nodes)라고 부른다. 예를 들어 위 그림에서 F와 G는 형제 노드이다.
자식이 없는 노드를 단말 노드(terminal node) 혹은 리프 노드(leaf node)라고 부른다.

특정한 노드로부터 루트 노드까지 거슬러 올라가는 경로 상의 노드들을 조상 노드(ancestor nodes)라고 부른다.

루트 노드의 위치를 레벨 0(level 0)라고 부르며 한 단계씩 아래 노드로 내려오면서 레벨이 1씩 증가하는 것으로 생각한다.
어느 특정 노드의 자식 수(즉, 간선의 수)를 그 노드의 차수(degree)라고 부른다. 

루트 노드로부터 특정한 노드까지 연결되는 간선의 수를 그 노드의 높이(height)라고 부른다.
또 트리 전체에서 가장 높은 레벨이 그 트리 전체의 높이가 된다.
트리의 일부분만 따로 떼어 내어 생각할 때, 이를 서브트리(subtree)라고 부른다. 
범위를 좀 넓혀 여러 개의 트리들을 한꺼번에 생각하면 이를 숲(forest)이라고 부른다.

노드 번호는 1번부터 시작
레벨은 0부터 시작
------------------------------------------------------------------------------------------------------------------

$ 이진 트리
이진 트리란 트리의 모든 노드의 차수가 2 이하로만 되어 있는 트리를 말한다.
다음 형식들이 있다.

-포화
모든 레벨에 노드들이 꽉 차 있는 모습의 이진 트리
포화 완전 이진 트리의 레벨이 h라면 노드의 개수는 (𝟐^(𝒉+𝟏)-1)개다.

-완전
맨 마지막 레벨의 노드들 중 오른쪽 노드들 일부가 연속으로 비어 있는 형태를 말한다.
트리의 높이가 h, 노드의 개수가 n개라면 (n+1)부터 (𝟐^(𝒉+𝟏)−𝟏)"번의 노드가 비어 있는 형태다.

-편향
노드가 오른쪽 혹은 왼쪽 방향으로만 있는 이진 트리를 말한다. 각각 왼쪽 편향, 오른쪽 편향 이진 트리라고 부른다.

----------------------------------------------------------------------------------------

$$$$$$기말시험 문제$$$$$$

$ 일반 트리를 이진 트리로 변환하는 방법

① 부모 노드의 가장 왼쪽 자식 노드는 그냥 부모 노드의 왼쪽 자식 노드가 된다.
② 가장 왼쪽 자식 노드가 아닌 다른 노드들은 차례대로 왼쪽 자식 노드의 오른쪽 자식 노드로 만든다.
③ 위 과정을 루트 노드로부터 진행하면 이진 트리로 변환할 수 있다.
3차수일 경우 3차수가 2차수의 오른쪽 자식이 되게

----------------------------------------------------------------------------------------
$ 이진 트리에서 할 수 있는 연산

이진 트리에 일단 자료들이 보관되어 있다고 할 때,

 이진 트리에서 할 수 있는 가장 기본적인 연산은 이진 트리의 각 노드를 방문하는 연산이 필요하다.
 이진 트리에 노드를 삽입하는 연산
이진 트리에서 특정 노드를 삭제하는 연산
이진 트리의 각 노드를 한 번씩 빠짐없이 방문하는 연산(행위) - 이를 순회(Traversal, 운행)라고 한다.
특정값을 가지는 노드가 이진 트리에 존재하는지 알아보는 탐색 연산 등을 생각할 수 있다.
----------------------------------------------------------------------------------------------------

이진 트리에서는 어느 임의의 노드를 기준으로 생각했을 때, 왼쪽 자식, 오른쪽 자식에 대한 서브트리가 있을 수 있으므로, 
모든 노드를 방문하는 연산에 대해 아래와 같은 3가지 기본 작업을 생각할 수 있다.

① 해당 노드의 자료를 처리(예를 들면 읽기 작업) 작업 : D 
② 해당 노드의 왼쪽 서브트리를 방문하는 작업 : L
③ 해당 노드의 오른쪽 서브트리를 방문하는 작업 : R

$$$$$$기말시험 문제$$$$$$

위 3가지 작업에서 왼쪽 서브트리를 오른쪽 서브트리보다 항상 먼저 방문한다고 생각하고, 
데이터 작업을 언제 하느냐를 생각하면 3가지 순회 방법을 생각할 수 있다.

전위 순회법(preorder traversal)  : D-L-R    ABC                A
중위 순회법(inorder traversal)   : L-D-R    BAC
후위 순회법(postorder traversal) : L-R-D    BCA             B     C

항상 L -> R 이다, 항상 D를 중심으로 생각, B의 자식을 보러갈때 B는 D로 생각한다.
( 따로 떼서 본다! LDR로 B에 갔으면 B 에서 다시 LDR 한 것이 정답 )

프레젠테이션 15번 연습문제 풀어볼 것

전위 중위 후위 순위 보기. 시험에 나올듯
5월 11일 자료 시험범위 









